pipeline {
    agent any

    environment {
        DOCKERHUB_USERNAME = 'tksde'  
        FRONTEND_IMAGE = "${DOCKERHUB_USERNAME}/frontend"
        BACKEND_IMAGE = "${DOCKERHUB_USERNAME}/backend"
        KMY = 'ACCESSK'
        GMY = 'ACCESSG'
        DMY = 'ACCESSD'
        REPO_URL = 'https://github.com/TKSDE/Digitem_Technologies_Assigment.git'
        SERVER_IP = '143.244.141.228'  
        SERVER_USER = 'root'  
        NGINX_CONF_PATH = '/etc/nginx/conf.d/frontend.conf'
        FRONTEND_STATIC_PATH = '/usr/share/nginx/test/'
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    if (fileExists('.git')) {
                        sh 'git fetch origin main'
                        sh 'git reset --hard origin/main'
                    } else {
                        git branch: 'main', credentialsId: "${GMY}", url: "${REPO_URL}"
                    }
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                script {
                    dir('frontend') {
                        // Install dependencies and build frontend
                        sh 'npm install'
                        sh 'npm run build'
                        // Build Docker image for frontend
                        frontendApp = docker.build("${FRONTEND_IMAGE}")
                        // Push Docker image to Docker Hub
                        docker.withRegistry('https://registry.hub.docker.com', "${DMY}") {
                            frontendApp.push()
                        }
                    }
                }
            }
        }
        stage('Deploy Nginx Config and Static Files') {
            steps {
                script {
                    // Copy built frontend files to the static directory directly
                    sh """
                        cp -r frontend/build/* ${FRONTEND_STATIC_PATH}
                    """
                    // Copy Nginx configuration to the proper path
                    sh """
                        cp frontend/nginx/frontend.conf ${NGINX_CONF_PATH}
                    """
                    // Restart Nginx service
                    sh """
                    sudo -S systemctl restart nginx
                    """
                }
            }
        }
        // stage('Deploy Nginx Config and Static Files') {
        //     steps {
        //         script {
        //             // Copy built frontend files to the server with host key checking disabled
        //             sh """
        //                 scp -o StrictHostKeyChecking=no -r frontend/build/* ${SERVER_USER}@${SERVER_IP}:${FRONTEND_STATIC_PATH}
        //             """
        //             // Transfer Nginx configuration to the server with host key checking disabled
        //             sh """
        //                 scp -o StrictHostKeyChecking=no frontend/nginx/frontend.conf ${SERVER_USER}@${SERVER_IP}:${NGINX_CONF_PATH}
        //             """
        //             // Restart Nginx on the remote server with host key checking disabled
        //             sh """
        //                 ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} 'sudo systemctl restart nginx'
        //             """
        //         }
        //     }
        // }

        stage('Build Backend Docker Image') {
            steps {
                script {
                    dir('fastapi-hello-world') {  // Backend directory
                        backendApp = docker.build("${BACKEND_IMAGE}")
                    }
                }
            }
        }

        // stage('Push Frontend Docker Image') {
        //     steps {
        //         script {
        //             docker.withRegistry('https://registry.hub.docker.com', "${DMY}") {
        //                 frontendApp.push()
        //             }
        //         }
        //     }
        // }

        stage('Push Backend Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', "${DMY}") {
                        backendApp.push()
                    }
                }
            }
        }

        stage('Deploy to K3s') {
            steps {
                withCredentials([file(credentialsId: "${KMY}", variable: 'KUBECONFIG')]) {
                    script {
                        // Apply Kubernetes deployment files for frontend and backend
                        sh 'kubectl apply -f frontend/frontened-deployment.yaml'  
                        sh 'kubectl apply -f fastapi-hello-world/backend-deployment.yaml'
                    }
                }
            }
        }
    }
}
